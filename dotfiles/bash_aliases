#!/bin/bash

export EDITOR=vim

alias chmox='chmod +x'
alias keys='. ~/keys.sh'

alias vimr='vim --remote'
alias gvimr='gvim --remote'

#set -o vi

umask 022

export PATH=$HOME/dev/internal:$PATH
export PATH=$HOME/dev/scripts:$PATH
export PATH=$HOME/dev/Sysmods/scripts:$PATH
export PATH=$HOME/dev/Sysmods/chroot:$PATH
#export PATH=$HOME/dev/depot_tools:$PATH
#export PATH=$HOME/dev/Sysmods/Scripts:$PATH
#export PATH=$HOME/dev/Sysmods/ag:$PATH
#export PATH=$HOME/dev/Sysmods/jq.pkg/bin:$PATH
#export PATH=$HOME/dev/Sysmods/gterm-solarized:$PATH

#export PATH=$HOME/.cabal/bin:$PATH

## Base dir for all Android development tools / libraries / kits
#export MY_ANDROID_BASE=$HOME/dev/Android
## Link to current 'sdk' directory within ADT
#export MY_ANDROID_SDK=$MY_ANDROID_BASE/AndroidSdk
## Link to current 'Android Development Toolkit'
#export MY_ANDROID_ADT=$MY_ANDROID_BASE/ADT
#export MY_ADT_PLUGINS=$MY_ANDROID_ADT/eclipse/plugins
## Link to current NDK
#export MY_ANDROID_NDK=$MY_ANDROID_BASE/AndroidNdk

#function g()
#{
#    # Run in subshell (to preserve parent's $PWD):
#    (
#        while `true`; do
#            if [[ `pwd` == "/" ]]; then
#                echo "!!! Script gradlew not found in any parent path"
#                return
#            fi
#            if [[ -e `pwd`/gradlew ]]; then
#                `pwd`/gradlew ${*}
#                return
#            fi
#            cd ..
#        done
#    )
#}
#
#function get_ant_dir()
#{
#    cd $MY_ADT_PLUGINS;
#    $_ls -1 --color=never --directory --group-directories-first \
#        org.apache.ant* | head -1
#}
#
#function apath_adt()
#{
#    echo "Adding ADT and ANT's Ant to the path..."
#
#    export PATH=$PATH:$MY_ANDROID_SDK/platform-tools
#    export PATH=$PATH:$MY_ANDROID_SDK/tools
#
#    export ANDROID_HOME=$MY_ANDROID_SDK
#    export ANDROID_SDK=$MY_ANDROID_SDK
#
#    local eclipse_ant=$MY_ADT_PLUGINS/$(get_ant_dir)/bin/
#    export PATH=$PATH:$eclipse_ant
#}
#
#function sfastboot()
#{
#    sudo $MY_ANDROID_SDK/platform-tools/fastboot ${*}
#}
#
#function apath_ndk()
#{
#    echo "Add the Android NDK to the path..."
#
#    export ANDROID_NDK=$MY_ANDROID_NDK
#    export PATH=$ANDROID_NDK:$PATH
#}
#
#function setup_aosp_var()
#{
#    echo "Setting up AOSP_PATH variable..."
#
#    export AOSP_PATH=$MY_ANDROID_BASE/AOSP/WC
#}
#
#function apath_ndk_arm_toolchain()
#{
#    echo "Adding static Android ARM toolchain to the path..."
#
#    export PATH=$PATH:$MY_ANDROID_BASE/ArmToolchain/bin
#}
#
#function setup_android()
#{
#    apath_adt
#    apath_ndk
#    setup_aosp_var
#    apath_ndk_arm_toolchain
#}
#
#function setup_devdroid()
#{
#    export DEVDROID=$HOME/dev/devdroid
#    export PATH=$DEVDROID/tools:$PATH
#}

alias dirs='dirs -v'

## Color definitions:
export COLOR_NC='\e[0m' # No Color
export COLOR_WHITE='\e[1;37m'
export COLOR_BLACK='\e[0;30m'
export COLOR_BLUE='\e[0;34m'
export COLOR_LIGHT_BLUE='\e[1;34m'
export COLOR_GREEN='\e[0;32m'
export COLOR_LIGHT_GREEN='\e[1;32m'
export COLOR_CYAN='\e[0;36m'
export COLOR_LIGHT_CYAN='\e[1;36m'
export COLOR_RED='\e[0;31m'
export COLOR_LIGHT_RED='\e[1;31m'
export COLOR_PURPLE='\e[0;35m'
export COLOR_LIGHT_PURPLE='\e[1;35m'
export COLOR_BROWN='\e[0;33m'
export COLOR_YELLOW='\e[1;33m'
export COLOR_GRAY='\e[0;30m'
export COLOR_LIGHT_GRAY='\e[0;37m'

update_history() {
    history -n
}

vboxdate () {
   # Adjust VM BIOS time to a given date
   secs=$(date --date="$2" +%s)    # convert supplied date to secs, since 1970-01-01
   let secs-=$(date +%s)           # subtract the date NOW
   msecs=$(( $secs * 1000 ))       # convert to millis
   echo Adjusting time ${msecs}ms
   echo VBoxManage modifyvm $1 --biossystemtimeoffset ${msecs};
}

#export PATH="$HOME/.rbenv/bin:$PATH"
#if [ -n "`which rbenv`" ]; then
#    eval "$(rbenv init -)"
#fi

if [ -n "$SCHROOT_CHROOT_NAME" ]; then

    echo -n "`echo -e $COLOR_LIGHT_GREEN`>>>`echo -e $COLOR_NC` "
    echo -n "Inside chroot named: $SCHROOT_CHROOT_NAME "
    echo    "`echo -e $COLOR_LIGHT_GREEN`<<<`echo -e $COLOR_NC`"
    echo

    export PS1="$COLOR_LIGHT_RED{$SCHROOT_CHROOT_NAME}$COLOR_NC $PS1"
    export DISPLAY=:0.0

    xhost + &> /dev/null || (echo "Failed to setup X host access")
fi

#export UNDER_SCRIPT=1
#if [ -z "$UNDER_SCRIPT" ]; then
#
#    logdir=$HOME/Logs
#    logname=$(date +%F_%T).$$.script
#
#    logfile=$logdir/.$logname
#    final_logfile=$logdir/$logname
#
#    trap '( mv $logfile $final_logfile )' EXIT
#
#    if [ ! -d $logdir ]; then
#        mkdir $logdir
#    fi
#
#    gzip -q $logdir/*.script &>/dev/null
#
#    export UNDER_SCRIPT=$logfile
#
#    script -e -f -q $logfile
#    exit $?
#fi

#alias branch-name='echo jam-`date +%Y%m%d`'
#
#export MY_ECLIPSE=$MY_ANDROID_ADT/eclipse/eclipse
#alias launch_adt='screen -dmS eclipse $MY_ECLIPSE'
#
#export MY_ANDROID_STUDIO=$MY_ANDROID_BASE/android-studio/bin/studio.sh
#alias launch_as='screen -dmS studio $MY_ANDROID_STUDIO'
#
#set MOZILLA_FIVE_HOME=/usr/lib/firefox

#cp_p()
#{
#   strace -q -ewrite cp -- "${1}" "${2}" 2>&1 \
#      | awk '{
#        count += $NF
#            if (count % 10 == 0) {
#               percent = count / total_size * 100
#               printf "%3d%% [", percent
#               for (i=0;i<=percent;i++)
#                  printf "="
#               printf ">"
#               for (i=percent;i<100;i++)
#                  printf " "
#               printf "]\r"
#            }
#         }
#         END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
#}

export PATH=$HOME/.local/bin:$PATH
export PATH=$HOME/dev/Sysmods/cp_p:$PATH

alias rscp='rsync -aSPh'
alias rsmv='rsync -aSPh --remove-source-files'

# {{{ Infinite bash history

export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%F %T] "

export HISTFILE=~/.bash_eternal_history

# }}}

PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

alias vi="vim"

if [[ $(uname) == "Darwin" ]]; then

    not_linux=1
    _ls='gls'
    readlink='greadlink'
    realpath='grealpath'

    alias ls='ls -G -F'

    #export JAVA_HOME=$(/usr/libexec/java_home -v ${MAC_JAVA_VERSION:-1.6})
else

    _ls='ls'
    not_linux=
    readlink='readlink'
    realpath='realpath'

    alias ls='ls --color -F'

    #export JAVA_HOME=$(dirname $(dirname $($realpath $(which javac))))

    #alias vim="'vim' --servername $HOSTNAME"
    #alias vi="'vim' --servername $HOSTNAME"
fi

if [[ -z $SCHROOT_CHROOT_NAME ]] && [[ -z $not_linux ]]; then
    shopt -s direxpand &> /dev/null || (echo "Failed to set direxpand option")
fi

alias sl=ls

if [[ -n $MANUAL_HOSTNAME ]]; then
	PS1='${debian_chroot:+<<$debian_chroot>> }\[\033[01;32m\]\u@'$MANUAL_HOSTNAME'\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]'"\$(__git_ps1)"' ${BUILD_PS1_TAG}\n\$ '
elif [[ -z $not_linux ]]; then
	PS1='${debian_chroot:+<<$debian_chroot>> }\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]'"\$(__git_ps1)"' ${BUILD_PS1_TAG}\n\$ '
else
	PS1='${debian_chroot:+<<$debian_chroot>> }\u@\h:\w'"\$(__git_ps1)"' ${BUILD_PS1_TAG}\n\$ '
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*|screen*)
    PS1="\[\e]0;${debian_chroot:+<<$debian_chroot>> }\w\a\]$PS1"
    ;;
*)
    ;;
esac

this_dir=$(dirname $($readlink -f ${BASH_SOURCE}))

source $this_dir/../git-completion.bash
source $this_dir/../git-prompt.sh

export GIT_PS1_SHOWDIRTYSTATE=1

start_ssh_ctrl() {
    local server=$1; shift 1
    screen -dmS sshm_$server ssh -v -M -N -S /tmp/ssh_ctrl_$server $server
}

#export LC_ALL=en_US.UTF-8
#export LANG=en_US.UTF-8
#export LANGUAGE=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8

alias j=jobs

alias f1='fg %1'
alias f2='fg %2'
alias f3='fg %3'
alias f4='fg %4'
alias f5='fg %5'
alias f6='fg %6'
alias f7='fg %7'
alias f8='fg %8'
alias f9='fg %9'

alias p=popd
alias up='cd ..'

alias jnice='schedtool -B -n 1 -e ionice -n 1'

#export TERM=xterm-256color

ssh_devbox() {
    set -x
    local tmp=`mktemp -t 'bashrcXXXX'`
    xterm -e "bash -c \"echo \$DISPLAY\" >$tmp"
    export DISPLAY="`cat $tmp`"
    ssh -Y -X ${*} devbox
    rm -vf $tmp
    set +x
}

alias start_docserv='~/dev/doxygen/start_docserv'
alias stop_docserv='kill `cat ~/dev/doxygen/docserv.pid`'

ssh_source() {
    if [[ -z $SSH_CONNECTION ]]; then
        echo $SSH_CLIENT | cut -d' ' -f1
    else
        echo $SSH_CONNECTION | cut -d' ' -f1
    fi
}

#all_devices() {
#    adb devices | grep -v "List of dev" | grep -v '^$' | awk '{print $1}'
#}
#
#adb_all() {
#    for dev in `all_devices`; do
#        adb -s $dev shell getprop ro.product.model
#        adb -s $dev ${*}
#    done
#}
#
#adb_all_p() {
#    for dev in `all_devices`; do
#        adb -s $dev ${*} &
#    done
#    wait
#}

tmux-update-env() {

    local tmp=`mktemp -t 'bashrcXXXX'`

    tmux show-environment \
        | sed -e 's/^-\(.*\)/unset \1/' \
              -e 's/\(.*=\)\(.*\)/export \1"\2"/' \
    >$tmp

    echo ">>> Updating env with new vars from tmux:"
    cat $tmp
    echo "... done."

    eval `cat $tmp`
    rm -vf $tmp
}

j-scratch-dir() {
    mkdir -p $HOME/scratch
    local scratch_dir=$HOME/scratch/$((RANDOM))
    if [[ -d $scratch_dir ]]; then
        scratch_dir=$HOME/scratch/$((RANDOM))
    fi
    if [[ -d $scratch_dir ]]; then
        echo "!!! second attempt to create a temp dir failed"
        return 1
    fi
    mkdir $scratch_dir
    cd $scratch_dir
}

j-set-tmux-title() {
    printf "\033k$1\033\\"
}

#eclipse () {
#    open -n $HOME/dev/eclipse-mars/Eclipse.app
#}

j-vid-to-gif () {

    local FUNC_USAGE="Usage: ${FUNCNAME[0]} <input.mov> <output.gif>" 

    : ${1?$FUNC_USAGE}
    : ${2?$FUNC_USAGE}

    ffmpeg -i "$1" -vf scale=800:-1 -r 10 -f image2pipe -vcodec ppm - |\
    convert -delay 5 -layers Optimize -loop 0 - "$2"
}

#ss-to-wiki() {
#    $HOME/dev/c-ss-to-wiki/app/Main.hs $@
#}

#export LESSOPEN="| src-hilite-lesspipe.sh %s"
#export LESSOPEN="| /usr/local/bin/src-hilite-lesspipe.sh %s"
#export LESS=" -R "
#alias less='less -m -N -g -i -J --underline-special --SILENT'
alias more='less'

#export PATH=/Users/212570525/.captain/bin:$PATH
#alias atom=$HOME/.atom/atom
#export PATH=$PATH:$HOME/gcc-arm-none-eabi/bin

if which hub &>/dev/null; then
  eval "$(hub alias -s)"
fi

if which fzf-share &>/dev/null; then
  source "$(fzf-share)/completion.bash"
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion

if [[ -d "$HOME/.cargo/bin" ]]; then
  export PATH="$HOME/.cargo/bin:$PATH"
fi

if [[ -f ~/.local_stuff.bash ]]; then
  source ~/.local_stuff.bash
fi

cd() {
   local MAX=20
   local LEN=${#DIRSTACK[@]}
   if [ $# -eq 0 ] || [ "$1" = "-" ]; then
      builtin cd "$@"
      pushd -n $OLDPWD > /dev/null
   else
      pushd "$@" > /dev/null || return 1
   fi
   if [ $LEN -gt 1 ]; then
      for i in `seq 1 $LEN`; do
         eval "p=~$i"
         if [ "$p" = "$PWD" ]; then
            popd -n +$i > /dev/null
            break
         fi
      done
   fi
   if [ $LEN -ge $MAX ]; then
      popd -n -0 > /dev/null
   fi
}

f() {
  find . -name $*
}

start_emacs() {
  emacs &> /dev/null &
  disown
}

export GOOGLE_IDP_ID=C02x4yyeb
export GOOGLE_SP_ID=115297745755

alias aws-google-auth='touch $HOME/.aws/credentials; touch $HOME/.aws/config; touch $HOME/.aws/saml_cache.xml; docker run -v $HOME/.aws:/root/.aws --rm -it -e GOOGLE_USERNAME=jason@swift-nav.com -e GOOGLE_IDP_ID=C02x4yyeb -e GOOGLE_SP_ID=115297745755 -e AWS_DEFAULT_REGION=us-west-2 -e AWS_PROFILE=default cevoaustralia/aws-google-auth'

# added by travis gem
[ -f /Users/jason/.travis/travis.sh ] && source /Users/jason/.travis/travis.sh

export PATH=$HOME/.nix-profile/bin:$PATH

ssh-man() {
  if [[ -n "$VITANI" ]]; then
    ssh $VITANI man $* | less
  else
    ssh vitani.local man $* | less
  fi
}

if [ -e /Users/jason/.nix-profile/etc/profile.d/nix.sh ]; then . /Users/jason/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer

source $HOME/.rvm_setup.bash

export PATH="/usr/local/sbin:$PATH"
# export PATH="$HOME/miniconda3/bin:$PATH"  # commented out by conda initialize  # commented out by conda initialize

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/jason/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/jason/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/jason/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/jason/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<


export PATH="$HOME/.cargo/bin:$PATH"
