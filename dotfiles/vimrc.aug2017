" Vim Config

syntax on

" {{{ Basic vim config
set nocp
set hidden
set number

if version >= 703
    set colorcolumn=120
endif

set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
" }}}

" {{{ Vundle Init
filetype off " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" }}}
"
Plugin 'tmux-plugins/vim-tmux'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tpope/vim-sensible'
Plugin 'altercation/vim-colors-solarized'
Plugin 'jamessan/vim-gnupg'
Plugin 'kien/ctrlp.vim'
Plugin 'rking/ag.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'justinmk/vim-sneak'
Plugin 'tpope/vim-dispatch'
Plugin 'racer-rust/vim-racer'
Plugin 'vim-scripts/DoxyGen-Syntax'
Plugin 'purescript-contrib/purescript-vim'
Plugin 'junegunn/vim-easy-align'

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'whiteinge/diffconflicts'

"Plugin 'vim-syntastic/syntastic'
"Plugin 'maralla/validator.vim'

let g:sneak#label = 1

"let g:syntastic_debug = 2

let g:syntastic_clang_tidy_config_file = '/Users/jason/dev/piksi_buildroot/.clang_complete'
let g:syntastic_cpp_config_file = '/Users/jason/dev/piksi_buildroot/.clang_complete'

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

let g:syntastic_c_checkers = ['clang_tidy']
let g:syntastic_cpp_checkers = ['clang_tidy']

"let g:syntastic_c_clang_tidy_exec = '/Users/jason/dev/scripts/clang-tidy'
"let g:syntastic_cpp_clang_tidy_exec = '/Users/jason/dev/scripts/clang-tidy'

" {{{ Vundle finalization
call vundle#end()
filetype plugin indent on
filetype on
" }}}

" {{{ CtrlP config
let g:ctrlp_cmd = 'CtrlPBuffer'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files --exclude-standard -co']
let g:ctrlp_max_files = 0
" }}}

" {{{ TMux navigation support

" let g:tmux_navigator_no_mappings = 1

" nnoremap <silent> <c-a>h :TmuxNavigateLeft<cr>
" nnoremap <silent> <c-a>j :TmuxNavigateDown<cr>
" nnoremap <silent> <c-a>k :TmuxNavigateUp<cr>
" nnoremap <silent> <c-a>l :TmuxNavigateRight<cr>
" nnoremap <silent> <c-a>\ :TmuxNavigatePrevious<cr>

" }}}


" {{{ Color config
let g:solarized_termtrans=1
colorscheme solarized
set background=dark
"set background=light
" }}}

let mapleader = "\<Space>"

set clipboard=unnamed,unnamedplus " Use system clipboard by default

set laststatus=2 " always display the status line
set cursorline
set showmatch
set hlsearch

nnoremap <silent> <Leader>x :bp\|bd #<CR>

noremap <Leader>n :NERDTreeToggle<CR>
nnoremap <Leader>n :NERDTreeToggle<CR>

noremap <Leader>y :only<CR>
nnoremap <Leader>y :only<CR>

noremap <Leader>o :CtrlPBuffer<CR>
nnoremap <Leader>o :CtrlPBuffer<CR>

noremap <Leader>m :Make<CR>
nnoremap <Leader>m :Make<CR>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Mouse support
set mouse+=a

"set iskeyword-=_

if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

let g:racer_experimental_completer = 1
let g:racer_cmd = "~/.cargo/bin/racer"

set et
set ts=2
set sts=2
set sw=2
set ai
set completeopt+=longest,menuone

autocmd FileType c setlocal cindent et
autocmd FileType cpp setlocal cindent et
